package {{ .PackageName }}

import (
    "testing"

    "github.com/hedhyw/gherkingen/v2/pkg/bdd"
)

{{ define "Background" }}
    {{- $Background := . -}}
    background := func(t *testing.T, f *bdd.Feature) interface{} {
        /* TODO: Feel free to modify return value(s). */
        {{- range $Background.Steps }}
        f.{{ .PluginData.GoName }}({{.PluginData.GoValue}}, func() {
            
        })
        {{- end }}

        return nil
    }

{{ end }}

{{ define "Scenario" }}
    {{- $Scenario := . -}}
    f.{{ $Scenario.PluginData.GoName }}({{ $Scenario.PluginData.GoValue }}, func({{- /*
        t is usualy unused if there are no examples 
    */ -}}{{- if $Scenario.Examples -}}_{{- else -}}t{{- end -}} *testing.T, f *bdd.Feature) {
        {{- range $Scenario.Examples }}

        {{- /* Define test case struct. */ -}}

        type testCase struct {
            {{- range .TableHeader.Cells }}
			{{ .PluginData.GoName }} {{ .PluginData.GoType }} `field:"{{.Value}}"`
            {{- end -}}
		}

        testCases := map[string]testCase{
            {{- range .TableBody }}
			{{ .PluginData.GoValue }}: {
            {{- /* Struct fields start. */ -}}
                {{- range $index, $cell := .Cells -}}
                {{- if $index -}},{{ end }} {{- $cell.PluginData.GoValue -}}
                {{- end -}}
            {{- /* Struct fields end. */ -}}
            },
            {{- end }}
		}

        f.TestCases(testCases, func(t *testing.T, f *bdd.Feature, tc testCase) {
            {{- if $Scenario.PluginData.GoHasBackground }}
            _ = background(t, f)
            {{- end -}}

            {{- range $Scenario.Steps }}
            f.{{ .PluginData.GoName }}({{ .PluginData.GoValue }}, func() {
                
            })
            {{- end }}
        })
        {{- else }}
        {{- range $Scenario.Steps }}
        f.{{ .PluginData.GoName }}({{.PluginData.GoValue}}, func() {
            {{- if $Scenario.PluginData.GoHasBackground }}
            _ = background(t, f)
            {{- end }}

        })
        {{- end -}}
        {{ end }}
    })
{{ end }}

{{ define "Rule" }}
    {{ $Rule := . }}
    f.{{ $Rule.PluginData.GoName }}({{ $Rule.PluginData.GoValue }}, func(_ *testing.T, f *bdd.Feature) {
        {{- range $Rule.Children -}}

        {{- if .Background }}
        {{ template "Background" .Background }}
        {{- end }}

        {{- if .Scenario }}
        {{- template "Scenario" .Scenario -}}
        {{- end }}

        {{- end -}}
    })
{{ end }}

func Test{{ .Feature.PluginData.GoName }}(t *testing.T) {
    f := bdd.NewFeature(t, {{ .Feature.PluginData.GoValue }})
    {{ if .Feature.PluginData.GoComment }}
    /* {{ .Feature.PluginData.GoComment }} */
    {{ end }}

    {{- range .Feature.Children }}

    {{ if .Background }}
    {{ template "Background" .Background }}
    {{- end -}}

    {{ if .Scenario }}
    {{ template "Scenario" .Scenario }}
    {{- end -}}

    {{ if .Rule }}
    {{ template "Rule" .Rule }}
    {{- end -}}

    {{- end -}}
}
