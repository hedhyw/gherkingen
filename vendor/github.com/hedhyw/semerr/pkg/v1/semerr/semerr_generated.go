// Code generated by "github.com/hedhyw/semerr"; DO NOT EDIT.

package semerr

// BadRequestError is a permanent error.
// It means that the request was corrupted.
type BadRequestError struct {
	permanentWrappedError
}

// NewBadRequestError wraps err and creates BadRequestError.
// It means that the request was corrupted.
// If err is nil it returns nil.
func NewBadRequestError(err error) error {
	if err == nil {
		return nil
	}

	return BadRequestError{newPermanentWrappedError(err)}
}

// ConflictError is a permanent error.
// Attempt to create a resource that already exists.
type ConflictError struct {
	permanentWrappedError
}

// NewConflictError wraps err and creates ConflictError.
// Attempt to create a resource that already exists.
// If err is nil it returns nil.
func NewConflictError(err error) error {
	if err == nil {
		return nil
	}

	return ConflictError{newPermanentWrappedError(err)}
}

// ForbiddenError is a permanent error.
// It means that there is no access to a restricted resource.
type ForbiddenError struct {
	permanentWrappedError
}

// NewForbiddenError wraps err and creates ForbiddenError.
// It means that there is no access to a restricted resource.
// If err is nil it returns nil.
func NewForbiddenError(err error) error {
	if err == nil {
		return nil
	}

	return ForbiddenError{newPermanentWrappedError(err)}
}

// InternalServerError is a permanent error.
// An unknown unhandled internal server error.
type InternalServerError struct {
	permanentWrappedError
}

// NewInternalServerError wraps err and creates InternalServerError.
// An unknown unhandled internal server error.
// If err is nil it returns nil.
func NewInternalServerError(err error) error {
	if err == nil {
		return nil
	}

	return InternalServerError{newPermanentWrappedError(err)}
}

// NotFoundError is a permanent error.
// It means that accessed resource doesn't exist.
type NotFoundError struct {
	permanentWrappedError
}

// NewNotFoundError wraps err and creates NotFoundError.
// It means that accessed resource doesn't exist.
// If err is nil it returns nil.
func NewNotFoundError(err error) error {
	if err == nil {
		return nil
	}

	return NotFoundError{newPermanentWrappedError(err)}
}

// RequestEntityTooLargeError is a permanent error.
// It means that the request has too large enities.
type RequestEntityTooLargeError struct {
	permanentWrappedError
}

// NewRequestEntityTooLargeError wraps err and creates RequestEntityTooLargeError.
// It means that the request has too large enities.
// If err is nil it returns nil.
func NewRequestEntityTooLargeError(err error) error {
	if err == nil {
		return nil
	}

	return RequestEntityTooLargeError{newPermanentWrappedError(err)}
}

// ServiceUnavailableError is a tememporary error.
// It indicates that the server is not ready to handle the request.
type ServiceUnavailableError struct {
	temporaryWrappedError
}

// NewServiceUnavailableError wraps err and creates ServiceUnavailableError.
// It indicates that the server is not ready to handle the request.
// If err is nil it returns nil.
func NewServiceUnavailableError(err error) error {
	if err == nil {
		return nil
	}

	return ServiceUnavailableError{newTemporaryWrappedError(err)}
}

// UnauthorizedError is a permanent error.
// It means that there is no access because of authorization restrictions.
type UnauthorizedError struct {
	permanentWrappedError
}

// NewUnauthorizedError wraps err and creates UnauthorizedError.
// It means that there is no access because of authorization restrictions.
// If err is nil it returns nil.
func NewUnauthorizedError(err error) error {
	if err == nil {
		return nil
	}

	return UnauthorizedError{newPermanentWrappedError(err)}
}
