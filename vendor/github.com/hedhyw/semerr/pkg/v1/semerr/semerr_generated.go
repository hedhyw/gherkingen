// Code generated by "github.com/hedhyw/semerr"; DO NOT EDIT.

package semerr

// StatusRequestTimeoutError is a temporary error.
//
// It indicates that the server did not receive a complete request
// message within the time that it was prepared to wait.
//
// It represents following statuses:
// - HTTP code: Request Timeout (408).
// - GRPC code: Canceled (1).
type StatusRequestTimeoutError struct {
	temporaryWrappedError
}

// NewStatusRequestTimeoutError wraps err and creates StatusRequestTimeoutError.
//
// It indicates that the server did not receive a complete request
// message within the time that it was prepared to wait.
//
// It represents following statuses:
// - HTTP code: Request Timeout (408).
// - GRPC code: Canceled (1).
//
// If err is nil it returns nil.
func NewStatusRequestTimeoutError(err error) error {
	if err == nil {
		return nil
	}

	return StatusRequestTimeoutError{newTemporaryWrappedError(err)}
}

// InternalServerError is not a temporary error.
//
// It indicates that the server encountered an unexpected
// condition that prevented it from fulfilling the request.
//
// It represents following statuses:
// - HTTP code: Internal Server Error (500).
// - GRPC code: Unknown (2).
type InternalServerError struct {
	permanentWrappedError
}

// NewInternalServerError wraps err and creates InternalServerError.
//
// It indicates that the server encountered an unexpected
// condition that prevented it from fulfilling the request.
//
// It represents following statuses:
// - HTTP code: Internal Server Error (500).
// - GRPC code: Unknown (2).
//
// If err is nil it returns nil.
func NewInternalServerError(err error) error {
	if err == nil {
		return nil
	}

	return InternalServerError{newPermanentWrappedError(err)}
}

// BadRequestError is not a temporary error.
//
// It indicates that the server cannot or will not process the
// request due to something that is perceived to be a client error.
//
// It represents following statuses:
// - HTTP code: Bad Request (400).
// - GRPC code: InvalidArgument (3).
type BadRequestError struct {
	permanentWrappedError
}

// NewBadRequestError wraps err and creates BadRequestError.
//
// It indicates that the server cannot or will not process the
// request due to something that is perceived to be a client error.
//
// It represents following statuses:
// - HTTP code: Bad Request (400).
// - GRPC code: InvalidArgument (3).
//
// If err is nil it returns nil.
func NewBadRequestError(err error) error {
	if err == nil {
		return nil
	}

	return BadRequestError{newPermanentWrappedError(err)}
}

// UnsupportedMediaTypeError is not a temporary error.
//
// It indicates indicates that the origin server is refusing
// to service the request because the content is in a format
// not supported by this method on the target resource.
//
// It represents following statuses:
// - HTTP code: Unsupported Media Type (415).
// - GRPC code: InvalidArgument (3).
type UnsupportedMediaTypeError struct {
	permanentWrappedError
}

// NewUnsupportedMediaTypeError wraps err and creates UnsupportedMediaTypeError.
//
// It indicates indicates that the origin server is refusing
// to service the request because the content is in a format
// not supported by this method on the target resource.
//
// It represents following statuses:
// - HTTP code: Unsupported Media Type (415).
// - GRPC code: InvalidArgument (3).
//
// If err is nil it returns nil.
func NewUnsupportedMediaTypeError(err error) error {
	if err == nil {
		return nil
	}

	return UnsupportedMediaTypeError{newPermanentWrappedError(err)}
}

// StatusGatewayTimeoutError is a temporary error.
//
// It indicates that the server, while acting as a gateway or
// proxy, did not receive a timely response from an upstream
// server it needed to access in order to complete the request.
//
// It represents following statuses:
// - HTTP code: Gateway Timeout (504).
// - GRPC code: DeadlineExceeded (4).
type StatusGatewayTimeoutError struct {
	temporaryWrappedError
}

// NewStatusGatewayTimeoutError wraps err and creates StatusGatewayTimeoutError.
//
// It indicates that the server, while acting as a gateway or
// proxy, did not receive a timely response from an upstream
// server it needed to access in order to complete the request.
//
// It represents following statuses:
// - HTTP code: Gateway Timeout (504).
// - GRPC code: DeadlineExceeded (4).
//
// If err is nil it returns nil.
func NewStatusGatewayTimeoutError(err error) error {
	if err == nil {
		return nil
	}

	return StatusGatewayTimeoutError{newTemporaryWrappedError(err)}
}

// NotFoundError is not a temporary error.
//
// It indicates that the origin server did not find a current
// representation for the target resource or is not willing to
// disclose that one exists.
//
// It represents following statuses:
// - HTTP code: Not Found (404).
// - GRPC code: NotFound (5).
type NotFoundError struct {
	permanentWrappedError
}

// NewNotFoundError wraps err and creates NotFoundError.
//
// It indicates that the origin server did not find a current
// representation for the target resource or is not willing to
// disclose that one exists.
//
// It represents following statuses:
// - HTTP code: Not Found (404).
// - GRPC code: NotFound (5).
//
// If err is nil it returns nil.
func NewNotFoundError(err error) error {
	if err == nil {
		return nil
	}

	return NotFoundError{newPermanentWrappedError(err)}
}

// ConflictError is not a temporary error.
//
// It indicates that the request could not be completed due to
// a conflict with the current state of the target resource.
//
// It represents following statuses:
// - HTTP code: Conflict (409).
// - GRPC code: AlreadyExists (6).
type ConflictError struct {
	permanentWrappedError
}

// NewConflictError wraps err and creates ConflictError.
//
// It indicates that the request could not be completed due to
// a conflict with the current state of the target resource.
//
// It represents following statuses:
// - HTTP code: Conflict (409).
// - GRPC code: AlreadyExists (6).
//
// If err is nil it returns nil.
func NewConflictError(err error) error {
	if err == nil {
		return nil
	}

	return ConflictError{newPermanentWrappedError(err)}
}

// ForbiddenError is not a temporary error.
//
// It indicates that the server understood the request but
// refuses to fulfill it.
//
// It represents following statuses:
// - HTTP code: Forbidden (403).
// - GRPC code: PermissionDenied (7).
type ForbiddenError struct {
	permanentWrappedError
}

// NewForbiddenError wraps err and creates ForbiddenError.
//
// It indicates that the server understood the request but
// refuses to fulfill it.
//
// It represents following statuses:
// - HTTP code: Forbidden (403).
// - GRPC code: PermissionDenied (7).
//
// If err is nil it returns nil.
func NewForbiddenError(err error) error {
	if err == nil {
		return nil
	}

	return ForbiddenError{newPermanentWrappedError(err)}
}

// TooManyRequestsError is not a temporary error.
//
// It indicates the user has sent too many requests in a given
// amount of time.
//
// It represents following statuses:
// - HTTP code: Too Many Requests (429).
// - GRPC code: ResourceExhausted (8).
type TooManyRequestsError struct {
	permanentWrappedError
}

// NewTooManyRequestsError wraps err and creates TooManyRequestsError.
//
// It indicates the user has sent too many requests in a given
// amount of time.
//
// It represents following statuses:
// - HTTP code: Too Many Requests (429).
// - GRPC code: ResourceExhausted (8).
//
// If err is nil it returns nil.
func NewTooManyRequestsError(err error) error {
	if err == nil {
		return nil
	}

	return TooManyRequestsError{newPermanentWrappedError(err)}
}

// RequestEntityTooLargeError is not a temporary error.
//
// It indicates that the server is refusing to process
// a request because the request content is larger than
// the server
//
// It represents following statuses:
// - HTTP code: Request Entity Too Large (413).
// - GRPC code: OutOfRange (11).
type RequestEntityTooLargeError struct {
	permanentWrappedError
}

// NewRequestEntityTooLargeError wraps err and creates RequestEntityTooLargeError.
//
// It indicates that the server is refusing to process
// a request because the request content is larger than
// the server
//
// It represents following statuses:
// - HTTP code: Request Entity Too Large (413).
// - GRPC code: OutOfRange (11).
//
// If err is nil it returns nil.
func NewRequestEntityTooLargeError(err error) error {
	if err == nil {
		return nil
	}

	return RequestEntityTooLargeError{newPermanentWrappedError(err)}
}

// UnimplementedError is not a temporary error.
//
// It indicates that the server does not support
// the functionality required to fulfill the request.
//
// It represents following statuses:
// - HTTP code: Not Implemented (501).
// - GRPC code: Unimplemented (12).
type UnimplementedError struct {
	permanentWrappedError
}

// NewUnimplementedError wraps err and creates UnimplementedError.
//
// It indicates that the server does not support
// the functionality required to fulfill the request.
//
// It represents following statuses:
// - HTTP code: Not Implemented (501).
// - GRPC code: Unimplemented (12).
//
// If err is nil it returns nil.
func NewUnimplementedError(err error) error {
	if err == nil {
		return nil
	}

	return UnimplementedError{newPermanentWrappedError(err)}
}

// ServiceUnavailableError is a temporary error.
//
// It indicates that the server is not ready to handle
// the request.
//
// It represents following statuses:
// - HTTP code: Service Unavailable (503).
// - GRPC code: Unavailable (14).
type ServiceUnavailableError struct {
	temporaryWrappedError
}

// NewServiceUnavailableError wraps err and creates ServiceUnavailableError.
//
// It indicates that the server is not ready to handle
// the request.
//
// It represents following statuses:
// - HTTP code: Service Unavailable (503).
// - GRPC code: Unavailable (14).
//
// If err is nil it returns nil.
func NewServiceUnavailableError(err error) error {
	if err == nil {
		return nil
	}

	return ServiceUnavailableError{newTemporaryWrappedError(err)}
}

// UnauthorizedError is not a temporary error.
//
// It indicates that the request has not been applied because
// it lacks valid authentication credentials for the target
// resource.
//
// It represents following statuses:
// - HTTP code: Unauthorized (401).
// - GRPC code: Unauthenticated (16).
type UnauthorizedError struct {
	permanentWrappedError
}

// NewUnauthorizedError wraps err and creates UnauthorizedError.
//
// It indicates that the request has not been applied because
// it lacks valid authentication credentials for the target
// resource.
//
// It represents following statuses:
// - HTTP code: Unauthorized (401).
// - GRPC code: Unauthenticated (16).
//
// If err is nil it returns nil.
func NewUnauthorizedError(err error) error {
	if err == nil {
		return nil
	}

	return UnauthorizedError{newPermanentWrappedError(err)}
}
